Как собрать проект:
    0. Клонируй репу с проектом: 
    git clone git@github.com:nikiteslyuk/bridgeit_bot.git
    cd bridgeit_bot
    
    1. Создай виртуальное окружение (папка venv уже добавлена в .gitignore):
    python3 -m venv venv
    
    2. Активируй его:
    source venv/bin/activate
    
    3. Установи зависимости из requirements.txt:
    pip install -r requirements.txt
    
    4. Склонируй репозиторий библиотеки EndPlay:
    cd .. 
    git clone https://github.com/dominicprice/endplay
    cd endplay
    
    5. Установи библиотеку EndPlay:
    pip install -e .
    
    6. Укажи токен бота (этот токен никому не сообщать!): 
    export TG_TOKEN="7976805123:AAHpYOm43hazvkXUlDY-q4X9US18upq9uak"
    
    7. Всё, по идее можешь запускать:)
 
 Структура: 
    1. Программы: 
        1.1) logic.py - вся бриджевая логика
        1.2) detection.py - определение раскладов по фотке
        1.3) bot.py - сам ботик
    2. Веса модели для определения карт: yolov8s_playing_cards.pt
    3. Каталог /img - фотки для тестов + сюда временно (до момента отправки пользователю) сохраняются обработанные фотки. 


Мануал: 
    Я пока не вижу смысла писать длинный мануал - этим займемся как все будет стабильно и удовлетворительно работать. Поэтому если будут вопросы по функционированию моего говно-костыльно-кода - пиши)


Надо реализовать: 
    1. Подключить платёжную систему для продажи подписок. (надо еще с налогами разобраться, просто так брать деньги за услуги скорее всего не законно)
        - Выбрать платформу.
        - Реализовать механизм проверки оплаты.
        - Сделать обёртку или декоратор, ограничивающий доступ к функциям бота на основе наличия подписки.
        - Хранить информацию о подписчиках и сроках подписки в отдельном файле (например, JSON или CSV).
    
    2. Ограничить частоту использования анализа, чтобы защититься от спама и DDoS.
        - Ввести лимит: не более 2 анализов за каждые 10 минут на одного пользователя.
        - Реализовать отслеживание времени последних запросов и отказ при превышении лимита.
    
    3. Этим займусь я (так как понимаю, как это должно выглядеть): немного доработать анализатор, чтобы в интерфейсе Telegram‑бота он выглядел логичнее и нагляднее.
        - Например, когда пользователь делает оптимальный ход, вместо простой текстовой команды нужно показывать весь расклад после этого хода.
    
    4. Провести подготовку к закрытому бета-тестированию.
        - Найти 4–5 человек, которые согласны участвовать в тестировании.
        - Снять сервер  на первое время для размещения бота в рамках закрытого бета-тестирования.
    
