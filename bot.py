import logging
import os
import uuid
import mimetypes
import json
import datetime
import humanize
from functools import wraps
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters,
)
from telegram import BotCommand
from telegram.error import BadRequest
from telegram.constants import ParseMode

from telegram.request import HTTPXRequest



from logic import BridgeLogic
from detection import BridgeCardDetector
os.makedirs("img", exist_ok=True)

# TOKEN = os.getenv("TG_TOKEN")
TOKEN = "7976805123:AAHpYOm43hazvkXUlDY-q4X9US18upq9uak"
AUTHORIZED_ID = [375025446, 855302541, 5458141225]
UNLIMITED_PHOTO_ID = [375025446, 855302541]
logging.basicConfig(level=logging.INFO)
ANALYSIS_COMMANDS = [
    ("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", "display"),
    ("–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫", "current_player"),
    ("–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∑—è—Ç–∫–∏", "undo_last_trick"),
    ("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "show_history"),
    ("–ü–æ–∫–∞–∑–∞—Ç—å DD-—Ç–∞–±–ª–∏—Ü—É", "dd_table"),
    ("–°—ã–≥—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ", "play_optimal_card"),
    ("–°—ã–≥—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤–∑—è—Ç–∫—É", "play_optimal_trick"),
    ("–°—ã–≥—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–æ –∫–æ–Ω—Ü–∞", "play_optimal_to_end"),
    ("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ä—É–∫—É", "show_current_hand"),
]
req = HTTPXRequest(connection_pool_size=10, connect_timeout=10.0, read_timeout=60.0, write_timeout=60.0, pool_timeout=10.0)
ANALYSIS_CMDS_PER_PAGE = 4
CACHED_REQUESTS_DATABASE_NAME = "users_requests.json"


# === –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø ==============================================================

def require_auth(handler_func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        uid = update.effective_user.id
        if uid not in AUTHORIZED_ID:
            if update.message:
                await update.message.reply_text(
                    "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –±–µ—Ç–∞‚Äë—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ–∑–∂–µ!"
                )
            elif update.callback_query:
                await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
            return
        return await handler_func(update, context)

    return wrapper


def ignore_telegram_edit_errors(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except BadRequest as e:
            if "Message is not modified" in str(e) or "message to edit not found" in str(e):
                return
            raise
    return wrapper


def require_fresh_window(handler):
    """–°—Ç–∞—Ä–æ–µ –æ–∫–Ω–æ ‚Üí –º–æ–ª—á–∞ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    @wraps(handler)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        last_id: int | None = context.user_data.get("active_msg_id")

        if last_id is None or query.message.message_id != last_id:
            try:
                await query.edit_message_text(
                    "‚ö†Ô∏è –≠—Ç–æ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    reply_markup=None,
                )
            except BadRequest:
                pass
            await query.answer()
            return

        return await handler(update, context)

    return wrapper


def generate_filename() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .jpg,
    –Ω–∞–ø—Ä–∏–º–µ—Ä: 'a1b2c3d4e5f6.jpg'
    """
    return f"img/{uuid.uuid4().hex}.jpg"


async def ignore_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
    return

# === –£–¢–ò–õ–ò–¢–´ –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =============================================

def _pre(text: str) -> str:
    """–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç—Ä–æ–π–Ω—ã–µ –±—ç–∫—Ç–∏–∫–∏, —á—Ç–æ–±—ã Telegram –ø–æ–∫–∞–∑–∞–ª –º–æ–Ω–æ‚Äë—à—Ä–∏—Ñ—Ç."""
    return f"```\n{text}\n```"


async def safe_send(chat_func, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–∞–∑–±–∏–≤–∞–µ—Ç >4096 —Å–∏–º–≤–æ–ª–æ–≤)."""
    MAX_LEN = 4000  # –∑–∞–ø–∞—Å –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    for i in range(0, len(text), MAX_LEN):
        chunk = text[i : i + MAX_LEN]
        await chat_func(chunk, **kwargs)


async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –Ω–∞ —è–∑—ã–∫–µ –∫–æ–º–∞–Ω–¥."
    )

# === –•–ï–õ–ü–ï–†–´ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–† ====================================================

def main_menu_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üÉè –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–∫–ª–∞–¥–∞", callback_data="menu_analyze")],
        [InlineKeyboardButton("üìú –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="menu_privacy")],
        [InlineKeyboardButton("üôè –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—é", callback_data="menu_thanks")],
    ])


def analyze_menu_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ —Ñ–æ—Ç–æ", callback_data="input_photo")],
        [InlineKeyboardButton("üìÑ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ PBN", callback_data="input_pbn")],
        [InlineKeyboardButton("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–¥–∞—á—É", callback_data="generate_deal")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")],
    ])


def back_to_analyze_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_analyze")],
    ])


def analyze_result_markup() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚è™ –ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π", callback_data="rotate_ccw"),
            InlineKeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç—å –ø–æ —á–∞—Å–æ–≤–æ–π ‚è©", callback_data="rotate_cw"),
        ],
        [
            InlineKeyboardButton("üìÑ –í—ã–≤–µ—Å—Ç–∏ PBN-—Å—Ç—Ä–æ–∫—É", callback_data="to_pbn"),
            InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å —Å–¥–∞—á—É ‚úÖ", callback_data="accept_result"),
        ]
    ])


def analysis_keyboard(page: int = 0) -> InlineKeyboardMarkup:
    total = len(ANALYSIS_COMMANDS)
    per_page = ANALYSIS_CMDS_PER_PAGE
    start = page * per_page
    end = start + per_page
    btns = [
        [InlineKeyboardButton(text, callback_data=f"analysis_{cmd}")]
        for text, cmd in ANALYSIS_COMMANDS[start:end]
    ]

    nav = []
    if start > 0:
        nav.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"analysis_page_{page-1}"))
    if end < total:
        nav.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"analysis_page_{page+1}"))
    if nav:
        btns.append(nav)
    return InlineKeyboardMarkup(btns)

# === –°–û–°–¢–û–Ø–ù–ò–Ø ================================================================
STATE_AWAIT_PBN = "await_pbn"
STATE_AWAIT_PHOTO = "await_photo"

# === –°–û–ó–î–ê–¢–¨ / –û–ë–ù–û–í–ò–¢–¨ BridgeLogic –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ========================== / –û–ë–ù–û–í–ò–¢–¨ BridgeLogic –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========================

def set_logic_from_pbn(context: ContextTypes.DEFAULT_TYPE, pbn: str) -> BridgeLogic:
    """–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π BridgeLogic(PBN) –∏ –∫–ª–∞–¥—ë–º –≤ user_data.

    –ï—Å–ª–∏ PBN –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º ValueError –Ω–∞—Ä—É–∂—É, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å
    –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    logic = BridgeLogic(pbn)  # –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å ValueError
    context.user_data["logic"] = logic
    return logic


# === –ö–û–ú–ê–ù–î–´ ================================================================== 

@require_auth
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("state", None)
    sent = await update.message.reply_text(
        "–Ø –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –±–µ—Ç–∞‚Äë—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "–¢—ã–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, –∏—â–∏ –±–∞–≥–∏ –∏ –ø–∏—à–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é: @bridgeit_support!",
        reply_markup=main_menu_markup(),
    )
    context.user_data["active_msg_id"] = sent.message_id


async def show_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í–∞—à Telegram ID: {update.effective_user.id}")


@require_auth
async def add_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detector: BridgeCardDetector = context.user_data.get("detector")
    if not detector:
        await update.message.reply_text(
            "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Å–¥–∞—á–∏.\n"
            "–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–π —Å–¥–∞—á—É –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ PBN."
        )
        return

    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /addcard <–∫–∞—Ä—Ç–∞> <—Ä—É–∫–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: /addcard 4h W)")
        return

    try:
        detector.add(" ".join(context.args))
        sent = await update.message.reply_text(
            _pre(detector.preview()),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=analyze_result_markup(),
        )
        context.user_data["active_msg_id"] = sent.message_id
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


@require_auth
async def move_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detector: BridgeCardDetector = context.user_data.get("detector")
    if not detector:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Å–¥–∞—á–∏.")
        return

    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /movecard <–∫–∞—Ä—Ç–∞> <–∫—É–¥–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: /movecard 4h N)")
        return

    try:
        detector.move(" ".join(context.args))
        sent = await update.message.reply_text(
            _pre(detector.preview()),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=analyze_result_markup(),
        )
        context.user_data["active_msg_id"] = sent.message_id
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


@require_auth
async def remove_card(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detector: BridgeCardDetector = context.user_data.get("detector")
    if not detector:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Å–¥–∞—á–∏.")
        return

    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /removecard <–∫–∞—Ä—Ç–∞> <—Ä—É–∫–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: /removecard 4h W)")
        return

    try:
        detector.remove(" ".join(context.args))
        sent = await update.message.reply_text(
            _pre(detector.preview()),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=analyze_result_markup(),
        )
        context.user_data["active_msg_id"] = sent.message_id
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


@require_auth
async def clockwise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detector: BridgeCardDetector = context.user_data.get("detector")
    if not detector:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–¥–∞—á–∏.")
        return

    detector.clockwise()
    sent = await update.message.reply_text(
        _pre(detector.preview()),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=analyze_result_markup(),
    )
    context.user_data["active_msg_id"] = sent.message_id


@require_auth
async def uclockwise(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detector: BridgeCardDetector = context.user_data.get("detector")
    if not detector:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–¥–∞—á–∏.")
        return

    detector.uclockwise()
    sent = await update.message.reply_text(
        _pre(detector.preview()),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=analyze_result_markup(),
    )
    context.user_data["active_msg_id"] = sent.message_id


@require_auth
async def pbn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detector: BridgeCardDetector = context.user_data.get("detector")
    if not detector:
        await update.message.reply_text("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–¥–∞—á–∏.")
        return
    try:
        pbn_str = detector.to_pbn()
        await update.message.reply_text(f"PBN:\n{_pre(pbn_str)}", parse_mode=ParseMode.MARKDOWN)

        sent = await update.message.reply_text(
            _pre(detector.preview()),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=analyze_result_markup(),
        )
        context.user_data["active_msg_id"] = sent.message_id
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


@require_auth
async def accept(update: Update, context: ContextTypes.DEFAULT_TYPE):
    detector: BridgeCardDetector = context.user_data.get("detector")
    if not detector:
        await update.message.reply_text(
            "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–¥–∞—á–∏."
        )
        return
    try:
        pbn = detector.to_pbn()
        logic = set_logic_from_pbn(context, pbn)
        context.user_data.pop("detector", None)
        context.user_data["contract_set"] = False
        await update.message.reply_text(
            "–†–∞—Å–∫–ª–∞–¥ –ø—Ä–∏–Ω—è—Ç. –°–¥–µ–ª–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcontract <–∫–æ–Ω—Ç—Ä–∞–∫—Ç> <–ø–µ—Ä–≤–∞—è_—Ä—É–∫–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setcontract 3NT N)",
            parse_mode=ParseMode.MARKDOWN,
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


@require_auth
async def cmd_setcontract(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    if len(context.args) < 2:
        await update.message.reply_text(
            "–§–æ—Ä–º–∞—Ç: /setcontract <–∫–æ–Ω—Ç—Ä–∞–∫—Ç/–º–∞—Å—Ç—å> <–ø–µ—Ä–≤–∞—è_—Ä—É–∫–∞> (–ø—Ä–∏–º–µ—Ä: /setcontract 3NT N)"
        )
        return

    try:
        contract, first = context.args[0], context.args[1]
        logic.set_contract(contract, first)
        context.user_data["contract_set"] = True

        sent = await update.message.reply_text(
            _pre(logic.display()),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=analysis_keyboard(0),
        )
        context.user_data["active_msg_id"] = sent.message_id

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


# ---------------------------------------------------------------------------
# –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥
# ---------------------------------------------------------------------------
@require_auth
async def cmd_display(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    text = _pre(logic.display())
    idx = [c[1] for c in ANALYSIS_COMMANDS].index("display")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# Double-dummy —Ç–∞–±–ª–∏—Ü–∞
# ---------------------------------------------------------------------------
@require_auth
async def cmd_ddtable(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # if not context.user_data.get("contract_set"):
    #     await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
    #     return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    text = _pre(logic.dd_table())
    idx = [c[1] for c in ANALYSIS_COMMANDS].index("dd_table")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
# ---------------------------------------------------------------------------
@require_auth
async def cmd_currentplayer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    text = f"–¢–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫: {logic.current_player()}"
    idx = [c[1] for c in ANALYSIS_COMMANDS].index("current_player")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–æ–¥
# ---------------------------------------------------------------------------
@require_auth
async def cmd_optimalmove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    try:

        text = f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–æ–¥: {logic.optimal_move()}"
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞: {e}"

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("play_optimal_card")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ö–æ–¥–æ–≤
# ---------------------------------------------------------------------------
@require_auth
async def cmd_showmoveoptions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    try:
        text = _pre(logic.show_move_options())
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞: {e}"

    sent = await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=analysis_keyboard(0),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –°—ã–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç—É
# ---------------------------------------------------------------------------
@require_auth
async def cmd_playcard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /playcard <–∫–∞—Ä—Ç–∞> (–ø—Ä–∏–º–µ—Ä: /playcard 7h)")
        return

    try:
        text = logic.play_card(context.args[0])
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞: {e}"

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("play_optimal_card")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –°—ã–≥—Ä–∞—Ç—å –≤–∑—è—Ç–∫—É
# ---------------------------------------------------------------------------
@require_auth
async def cmd_playtrick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    if len(context.args) < 4:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /playtrick <–∫–∞—Ä—Ç–∞1> <–∫–∞—Ä—Ç–∞2> <–∫–∞—Ä—Ç–∞3> <–∫–∞—Ä—Ç–∞4>")
        return

    try:
        text = logic.play_trick(" ".join(context.args[:4]))
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞: {e}"

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("play_optimal_trick")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∑—è—Ç–∫—É
# ---------------------------------------------------------------------------
@require_auth
async def cmd_undolasttrick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    text = logic.undo_last_trick()

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("undo_last_trick")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∑—è—Ç–∫–µ
# ---------------------------------------------------------------------------
@require_auth
async def cmd_gototrick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /gototrick <–Ω–æ–º–µ—Ä>")
        return

    try:
        text = logic.goto_trick(int(context.args[0]))
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞: {e}"

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(0),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é
# ---------------------------------------------------------------------------
@require_auth
async def cmd_showhistory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    text = _pre(logic.show_history())

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("show_history")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –î–æ–∏–≥—Ä–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ
# ---------------------------------------------------------------------------
@require_auth
async def cmd_playoptimaltoend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    logic.play_optimal_to_end()
    text = "–î–æ–∏–≥—Ä—ã—à –¥–æ –∫–æ–Ω—Ü–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω."

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("play_optimal_to_end")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ä—É–∫—É
# ---------------------------------------------------------------------------
@require_auth
async def cmd_showcurrenthand(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    text = _pre(logic.show_current_hand())

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("show_current_hand")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞—Ä—Ç–µ –≤–æ –≤–∑—è—Ç–∫–µ
# ---------------------------------------------------------------------------
@require_auth
async def cmd_gotocard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    if len(context.args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /gotocard <–Ω–æ–º–µ—Ä_–≤–∑—è—Ç–∫–∏> <–Ω–æ–º–µ—Ä_–∫–∞—Ä—Ç—ã>")
        return

    try:
        text = logic.goto_card(int(context.args[0]), int(context.args[1]))
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞: {e}"

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(0),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –°—ã–≥—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
# ---------------------------------------------------------------------------
@require_auth
async def cmd_playoptimalcard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    text = logic.play_optimal_card()

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("play_optimal_card")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –°—ã–≥—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤–∑—è—Ç–∫—É
# ---------------------------------------------------------------------------
@require_auth
async def cmd_playoptimaltrick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    text = logic.play_optimal_trick()

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("play_optimal_trick")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id


# ---------------------------------------------------------------------------
# –°—ã–≥—Ä–∞—Ç—å N –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–∑—è—Ç–æ–∫
# ---------------------------------------------------------------------------
@require_auth
async def cmd_playoptimaltricks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("contract_set"):
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.")
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if not logic:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É.")
        return

    if len(context.args) < 1:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /playoptimaltricks <—Å–∫–æ–ª—å–∫–æ_–≤–∑—è—Ç–æ–∫>")
        return

    try:
        n = int(context.args[0])
        text = logic.play_optimal_tricks(n) or "–í–∑—è—Ç–∫–∏ —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã."
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞: {e}"

    idx = [c[1] for c in ANALYSIS_COMMANDS].index("play_optimal_trick")
    page = idx // ANALYSIS_CMDS_PER_PAGE

    sent = await update.message.reply_text(
        text,
        reply_markup=analysis_keyboard(page),
    )
    context.user_data["active_msg_id"] = sent.message_id

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===================================================


async def russian_precisedelta(delta: datetime.timedelta):
    humanize.i18n.activate("ru_RU")
    humanized = humanize.precisedelta(delta, minimum_unit='seconds', format='%0.0f')
    if " –∏ " in humanized:
        minutes, seconds = humanized.split(" –∏ ")
        if minutes[-1] == "–∞":
            minutes = minutes[:-1] + "—É"
        if seconds[-1] == "–∞":
            seconds = seconds[:-1] + "—É"
        return minutes + " –∏ " + seconds
    if humanized[-1] == "–∞":
        humanized = humanized[:-1] + "—É"
    return humanized


# === CALLBACK‚Äë–ö–ù–û–ü–ö–ò ===========================================================

@require_auth
@require_fresh_window
@ignore_telegram_edit_errors
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–ª–∞–≤–Ω–æ–µ –∏ —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –º–µ–Ω—é.
    """
    query = update.callback_query
    await query.answer()
    data = query.data

    # ---------- –ø—É–Ω–∫—Ç ¬´üÉè –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–∫–ª–∞–¥–∞¬ª ----------
    if data == "menu_analyze":
        context.user_data.pop("state", None)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ —Ä–∞—Å–∫–ª–∞–¥–∞:",
            reply_markup=analyze_menu_markup(),
        )
        return

    # ---------- ¬´–ü–æ–ª–∏—Ç–∏–∫–∞¬ª –∏ ¬´–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å¬ª -------
    if data in {"menu_privacy", "menu_thanks"}:
        await query.edit_message_text(
            "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")]]
            ),
        )
        return

    # ---------- ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–¥–∞—á—É¬ª --------------
    if data == "generate_deal":
        await query.edit_message_text(
            "–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_analyze")]]
            ),
        )
        return

    # ---------- –≤–≤–æ–¥ PBN-—Å—Ç—Ä–æ–∫–∏ ---------------------
    if data == "input_pbn":
        context.user_data["state"] = STATE_AWAIT_PBN
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ PBN-—Å—Ç—Ä–æ–∫—É —Ä–∞—Å–∫–ª–∞–¥–∞:",
            reply_markup=back_to_analyze_markup(),
        )
        return

    # ---------- –≤–≤–æ–¥ —Ñ–æ—Ç–æ ---------------------------
    if data == "input_photo":
        context.user_data["state"] = STATE_AWAIT_PHOTO
        await query.edit_message_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:",
            reply_markup=back_to_analyze_markup(),
        )
        return

    # ---------- ¬´–ù–∞–∑–∞–¥¬ª –∏–∑ analyze ‚Üí –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if data == "back_main":
        context.user_data.pop("state", None)
        await query.edit_message_text(
            "–Ø –Ω–∞—Ö–æ–∂—É—Å—å –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–¢—ã–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏, –∏—â–∏ –±–∞–≥–∏ –∏ –ø–∏—à–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é!",
            reply_markup=main_menu_markup(),
        )
        return

    # ---------- ¬´–ù–∞–∑–∞–¥¬ª –∏–∑ –ø–æ–¥–º–µ–Ω—é ‚Üí –º–µ–Ω—é –∞–Ω–∞–ª–∏–∑–∞ ---
    if data == "back_analyze":
        context.user_data.pop("state", None)
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ —Ä–∞—Å–∫–ª–∞–¥–∞:",
            reply_markup=analyze_menu_markup(),
        )
        return

    # ---------- fallback ----------------------------
    await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞", show_alert=True)


@require_auth
@require_fresh_window
@ignore_telegram_edit_errors
async def analyze_result_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    detector: BridgeCardDetector = context.user_data.get("detector")
    if not detector:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Ä–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if data == "rotate_ccw":
        detector.uclockwise()
        result = detector.preview()
        await query.edit_message_text(
            _pre(result),
            reply_markup=analyze_result_markup(),
            parse_mode=ParseMode.MARKDOWN
        )

    elif data == "rotate_cw":
        detector.clockwise()
        result = detector.preview()
        await query.edit_message_text(
            _pre(result),
            reply_markup=analyze_result_markup(),
            parse_mode=ParseMode.MARKDOWN
        )

    elif data == "to_pbn":
        try:
            pbn = detector.to_pbn()
            sent1 = await query.message.reply_text(
                f"PBN:\n{_pre(pbn)}",
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data["active_msg_id"] = sent1.message_id
            sent2 = await query.message.reply_text(
                _pre(detector.preview()),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=analyze_result_markup()
            )
            context.user_data["active_msg_id"] = sent2.message_id
        except RuntimeError as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    elif data == "accept_result":
        try:
            pbn = detector.to_pbn()
            logic = set_logic_from_pbn(context, pbn)
            context.user_data.pop("detector", None)
            context.user_data["contract_set"] = False
            await query.message.reply_text(
                "–†–∞—Å–∫–ª–∞–¥ –ø—Ä–∏–Ω—è—Ç. –°–¥–µ–ª–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setcontract <–∫–æ–Ω—Ç—Ä–∞–∫—Ç> <–ø–µ—Ä–≤–∞—è_—Ä—É–∫–∞> (–Ω–∞–ø—Ä–∏–º–µ—Ä: /setcontract 3NT N)",
                parse_mode=None,
            )
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


@require_auth
@require_fresh_window
@ignore_telegram_edit_errors
async def analysis_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    if not context.user_data.get("contract_set"):
        await query.edit_message_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /setcontract.",
            reply_markup=None,
        )
        return

    logic: BridgeLogic = context.user_data.get("logic")
    if logic is None:
        await query.edit_message_text(
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–¥–∞—á—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=None,
        )
        return

    if data.startswith("analysis_page_"):
        page = int(data.split("_")[-1])
        await query.edit_message_reply_markup(reply_markup=analysis_keyboard(page))
        return

    if data.startswith("analysis_"):
        cmd = data[len("analysis_"):]
        try:
            result = getattr(logic, cmd)()
        except Exception as e:
            result = f"–û—à–∏–±–∫–∞: {e}"

        try:
            idx  = [c[1] for c in ANALYSIS_COMMANDS].index(cmd)
            page = idx // ANALYSIS_CMDS_PER_PAGE
        except ValueError:
            page = 0

        await query.edit_message_text(
            _pre(result) if result else "–ì–æ—Ç–æ–≤–æ.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=analysis_keyboard(page),
        )


# === –¢–ï–ö–°–¢–û–í–´–ô –í–í–û–î ============================================================

@require_auth
async def handle_pbn_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("state") != STATE_AWAIT_PBN:
        await unknown_message(update, context)
        return

    try:
        detector = BridgeCardDetector.from_pbn(update.message.text.strip())
        context.user_data["detector"] = detector
        context.user_data.pop("state", None)

        sent = await update.message.reply_text(
            _pre(detector.preview()),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=analyze_result_markup(),
        )
        context.user_data["active_msg_id"] = sent.message_id

    except ValueError as ve:
        await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π PBN: {ve}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")


# === –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ============================================================

@require_auth
async def handle_photo_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª–∞-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ STATE_AWAIT_PHOTO"""
    if context.user_data.get("state") != STATE_AWAIT_PHOTO:
        return  # –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ

    msg = update.message

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø—Ä–∏—à–ª–æ ‚Äî —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if msg.photo:
        file = await msg.photo[-1].get_file()
        ext = '.jpg'
    elif msg.document and msg.document.mime_type.startswith("image/"):
        doc = msg.document
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–æ MIME –∏ –ø–æ –∏–º–µ–Ω–∏, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ MIME
        ext = mimetypes.guess_extension(doc.mime_type) or os.path.splitext(doc.file_name)[1]
        ext = ext.lower()
        allowed_exts = {'.jpg', '.jpeg', '.png', '.bmp', '.gif', '.tiff'}
        if ext not in allowed_exts:
            await msg.reply_text(
                f"–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —É–º–µ—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º ¬´{ext}¬ª.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: "
                "JPG, JPEG, PNG, BMP, GIF –∏–ª–∏ TIFF."
            )
            return
        file = await doc.get_file()
    else:
        # –Ω–∏ —Ñ–æ—Ç–æ, –Ω–∏ –¥–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await msg.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤: JPG, PNG, BMP, GIF –∏–ª–∏ TIFF."
        )
        return

    chat_id = str(msg.chat_id)
    uid = update.effective_user.id
    if uid not in UNLIMITED_PHOTO_ID:
        if os.path.exists(CACHED_REQUESTS_DATABASE_NAME):
            with open(CACHED_REQUESTS_DATABASE_NAME, "r") as json_file:
                database = json.load(json_file)
        else:
            database = {}
        datetime_now = datetime.datetime.now()
        if chat_id in database:
            current_diff = datetime_now - datetime.datetime.fromisoformat(database[chat_id][0])
            remaining_time = datetime.timedelta(minutes=10) - current_diff
            if len(database[chat_id]) > 2 or (len(database[chat_id]) == 2 and remaining_time.total_seconds() > 0):
                await msg.reply_text(
                    f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ. –°–ª–µ–¥—É—é—â–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {await russian_precisedelta(remaining_time)}"
                )
                return
            else:
                if len(database[chat_id]) == 2:
                    database[chat_id].pop(0)
                database[chat_id].append(datetime_now.isoformat())
        else:
            database[chat_id] = [datetime_now.isoformat()]
        with open(CACHED_REQUESTS_DATABASE_NAME, "w") as json_file:
            json.dump(database, json_file)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
    input_filename = generate_filename()
    output_filename = generate_filename()

    # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    path = await file.download_to_drive(input_filename)
    await msg.reply_text("–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ. –ü—Ä–∏—Å—Ç—É–ø–∞—é –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é –∫–∞—Ä—Ç...")

    try:
        detector = BridgeCardDetector(path)
        detector.visualize(output_filename)
        result = detector.preview()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(output_filename, "rb") as out_img:
            await msg.reply_photo(photo=out_img)
        sent = await msg.reply_text(
            _pre(result),
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=analyze_result_markup()
        )
        context.user_data["active_msg_id"] = sent.message_id
        context.user_data["detector"] = detector


    except Exception as e:
        await msg.reply_text(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for fn in (input_filename, output_filename):
            try:
                os.remove(fn)
            except OSError:
                pass

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop("state", None)

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===========================================================

def post_init(application: Application):
    return application.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("id", "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram-ID"),
        BotCommand("addcard", "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É –≤ —Ä—É–∫—É"),
        BotCommand("movecard", "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫–∞—Ä—Ç—É –≤ —Ä—É–∫—É"),
        BotCommand("removecard", "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É –∏–∑ —Ä—É–∫–∏"),
        BotCommand("clockwise", "–ü–æ–≤–µ—Ä–Ω—É—Ç—å —Å–¥–∞—á—É –ø–æ —á–∞—Å–æ–≤–æ–π"),
        BotCommand("uclockwise", "–ü–æ–≤–µ—Ä–Ω—É—Ç—å —Å–¥–∞—á—É –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π"),
        BotCommand("pbn", "–í—ã–≤–µ—Å—Ç–∏ PBN-—Å—Ç—Ä–æ–∫—É —Ç–µ–∫—É—â–µ–π —Å–¥–∞—á–∏"),
        BotCommand("accept", "–ü—Ä–∏–Ω—è—Ç—å —Ç–µ–∫—É—â—É—é —Å–¥–∞—á—É"),
        BotCommand("display", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç"),
        BotCommand("ddtable", "–ü–æ–∫–∞–∑–∞—Ç—å double-dummy —Ç–∞–±–ª–∏—Ü—É"),
        BotCommand("setcontract", "–ó–∞–¥–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –ø–µ—Ä–≤—É—é —Ä—É–∫—É (–Ω–∞–ø—Ä: /setcontract 3NT N)"),
        BotCommand("currentplayer", "–ö—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç"),
        BotCommand("optimalmove", "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞"),
        BotCommand("showmoveoptions", "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ö–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ä—É–∫–∏"),
        BotCommand("playcard", "–°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –∫–∞—Ä—Ç–æ–π (–Ω–∞–ø—Ä: /playcard 7h)"),
        BotCommand("playtrick", "–†–∞–∑—ã–≥—Ä–∞—Ç—å –≤–∑—è—Ç–∫—É 4 –∫–∞—Ä—Ç–∞–º–∏ (–Ω–∞–ø—Ä: /playtrick 7h 4c 3d 8s)"),
        BotCommand("undolasttrick", "–û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–∑—è—Ç–∫—É"),
        BotCommand("gototrick", "–û—Ç–∫–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É –≤–∑—è—Ç–∫–∏ (–Ω–∞–ø—Ä: /gototrick 5)"),
        BotCommand("showhistory", "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞"),
        BotCommand("playoptimaltoend", "–î–æ–∏–≥—Ä–∞—Ç—å —Å–¥–∞—á—É –¥–æ –∫–æ–Ω—Ü–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ"),
        BotCommand("showcurrenthand", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ä—É–∫—É"),
        BotCommand("gotocard", "–û—Ç–∫–∞—Ç–∏—Ç—å—Å—è –∫ –∫–∞—Ä—Ç–µ –≤–æ –≤–∑—è—Ç–∫–µ (–Ω–∞–ø—Ä: /gotocard 7 2)"),
        BotCommand("playoptimalcard", "–°–¥–µ–ª–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–æ–¥"),
        BotCommand("playoptimaltrick", "–†–∞–∑—ã–≥—Ä–∞—Ç—å –æ–¥–Ω—É –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –≤–∑—è—Ç–∫—É"),
        BotCommand("playoptimaltricks", "–†–∞–∑—ã–≥—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –≤–∑—è—Ç–æ–∫ (–Ω–∞–ø—Ä: /playoptimaltricks 3)"),
    ])


def main():
    app = Application.builder().token(TOKEN).request(req).post_init(post_init).build()

    app.add_handler(MessageHandler(filters.UpdateType.EDITED_MESSAGE, ignore_edit))

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("id", show_id))
    app.add_handler(CommandHandler("addcard", add_card))
    app.add_handler(CommandHandler("movecard", move_card))
    app.add_handler(CommandHandler("removecard", remove_card))
    app.add_handler(CommandHandler("clockwise", clockwise))
    app.add_handler(CommandHandler("uclockwise", uclockwise))
    app.add_handler(CommandHandler("pbn", pbn))
    app.add_handler(CommandHandler("accept", accept))
    app.add_handler(CommandHandler("display", cmd_display))
    app.add_handler(CommandHandler("ddtable", cmd_ddtable))
    app.add_handler(CommandHandler("setcontract", cmd_setcontract))
    app.add_handler(CommandHandler("currentplayer", cmd_currentplayer))
    app.add_handler(CommandHandler("optimalmove", cmd_optimalmove))
    app.add_handler(CommandHandler("showmoveoptions", cmd_showmoveoptions))
    app.add_handler(CommandHandler("playcard", cmd_playcard))
    app.add_handler(CommandHandler("playtrick", cmd_playtrick))
    app.add_handler(CommandHandler("undolasttrick", cmd_undolasttrick))
    app.add_handler(CommandHandler("gototrick", cmd_gototrick))
    app.add_handler(CommandHandler("showhistory", cmd_showhistory))
    app.add_handler(CommandHandler("playoptimaltoend", cmd_playoptimaltoend))
    app.add_handler(CommandHandler("showcurrenthand", cmd_showcurrenthand))
    app.add_handler(CommandHandler("gotocard", cmd_gotocard))
    app.add_handler(CommandHandler("playoptimalcard", cmd_playoptimalcard))
    app.add_handler(CommandHandler("playoptimaltrick", cmd_playoptimaltrick))
    app.add_handler(CommandHandler("playoptimaltricks", cmd_playoptimaltricks))

    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    app.add_handler(CallbackQueryHandler(menu_handler, pattern="^(menu_analyze|menu_privacy|menu_thanks|input_pbn|input_photo|back_main|back_analyze|generate_deal)$"))

    # –ö–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ (–ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è)
    app.add_handler(CallbackQueryHandler(analyze_result_handler, pattern="^(rotate_cw|rotate_ccw|accept_result|to_pbn)$"))

    app.add_handler(CallbackQueryHandler(analysis_handler, pattern="^analysis_"))

    # === –í–æ—Ç —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –í –†–ï–ñ–ò–ú–ï PBN ===
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.UpdateType.EDITED_MESSAGE,
        handle_pbn_input
    ))

    # –§–æ—Ç–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã-–∫–∞—Ä—Ç–∏–Ω–∫–∏
    app.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_photo_input))

    # === –ü–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî –ª–æ–≤–∏—Ç –≤–æ–æ–±—â–µ –≤—Å—ë ===
    app.add_handler(MessageHandler(filters.ALL, unknown_message))

    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()


if __name__ == "__main__":
    main()
